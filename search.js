var docs = 
[ 

  {
  "id"    : "http://dreamand.me/web/fulltext-search-at-jekyll-site/",
  "title"   : "Fulltext Search on Jekyll Site",
  "content" : "I power my blog using jekyll, a static blog generator. Recenty I saw a javascript full text search engine, lunr that really awesome. So I integrate into my blog and now my blog have full text search capibility! Awesome! So in this blog I will document and describe how I did it.Download lunrBefore get started, you need download lunr at https://github.com/olivernn/lunr.js and include in your blog js folder.Index ContentBefore doing full text search, you need to index your blog content. First, create a post.json file in _includes folder as template to render post document:{  id    : http://dreamand.me,  title   : ,  content : }After that, create a search.js at the root of the blog to hold the blog contents:------var docs = [   {  id    : http://dreamand.me/web/fulltext-search-at-jekyll-site/,  title   : Fulltext Search on Jekyll Site,  content : I power my blog using jekyll, a static blog generator. Recenty I saw a javascript full text search engine, [lunr][lunr] that really awesome. So I integrate into my blog and now my blog have full text search capibility! Awesome! So in this blog I will document and describe how I did it.### Download lunrBefore get started, you need download [lunr][lunr] at https://github.com/olivernn/lunr.js and include in your blog js folder.### Index ContentBefore doing full text search, you need to index your blog content. First, create a `post.json` file in `_includes` folder as template to render post document:~~~{  id    : http://dreamand.me{{ post.url }},  title   : {{ post.title }},  content : {{ post.content | strip_html | strip_newlines | remove:''  }}}~~~After that, create a `search.js` at the root of the blog to hold the blog contents:~~~------var docs = [ {% for post in site.posts limit:10 %}  {% include post.json %},{% endfor %}];// init lunrvar idx = lunr(function () {  this.field('title', 10);  this.field('content');})// add each document to be indexfor(var index in docs) {  idx.add(docs[index]);}~~~**Note:** The file must begin with YAML front matter block so it will be processed by Jekyll as special files.Now your blog is index under `idx` object and you can search it. At the end of the documents, create a `lunr` with index fields **title** and **content** to be index.### SearchNow is time to create search capibility using html, javascript. First, include `search.js` and `lunr` js in your site:~~~~~~Is time to create `form` element for user to search, I have created partial `search.html` for display search form:~~~  Search                  GO!      ~~~Finally, add jquery to handle search event, add into `search.js` or other javascript file:~~~$(function() {  $(#search button).click(function() {    search();  });  $(#search input).keypress(function(e) {    if(e.which == 13) {      e.preventDefault();      search();    }  });})function search() {  var result = idx.search($(#search input).val());  if(result &amp;&amp; result.length &gt; 0) {    window.location.replace(result[0].ref);  } else {    alert(Found nothing);  }}~~~### ImprovementCurrently the search is not so user friendly where autocomplete is not available. When I am free I will improve it.### SummaryUsing [lunr][lunr], we able to bring the power of fulltext search to static generated blog, [jekyll][jekyll]. Cool.[lunr]: https://github.com/olivernn/lunr.js[jekyll]: http://jekyllrb.com/},  {  id    : http://dreamand.me/web/internet-scammer/,  title   : How Internet Scammer Setup Scam,  content : I come across a site that displayed a intersting ads, earn money from home, so I clicked the ads. Then I landed a page. After have a look on the page, I immediately know it is a scam. In this post I will describe how they scam.The landing page is at here. WARNING: Do not submit your credit card infromation.Fake FamousOne way to trick victim is to make the offer is so famous that it appear on your country&amp;rsquo;s news. On this landing page, I notice there is one &amp;ldquo;AS SEEN ON&amp;rdquo; section which display my country&amp;rsquo;s newspaper publishers.After open the image in new tab, I notice the scammer use country specific &amp;ldquo;AS SEEN ON&amp;rdquo; images. So there are several fake famous images as following:SingaporeThailandIndonesiaFake Expire DateOne tactic I notice is the expired date of the offer, which is dynamically generate via JavaScript, thus the expired date is always next day. This make the victim fall in the trick to get the offer before expired.Fake CommentsFuther to trick victim, the scammer created few fake comments to indicate it is really work.Ask For PaymentAfter click some links, it finally come to a page mention for one-time payment. After click to get started, it link to a payment page ask for credit card details. Then victim will finally fall in to their scam.Ask for PaymentAsk for Credit Card InformationFinal step is to trick victim to fill in credit card information.ConclusionDon&amp;rsquo;t ever submit your credit card to untrusted party.},  {  id    : http://dreamand.me/cloud/how-to-update-appfog-apps-without-downtime/,  title   : How To Update AppFog App With Scheduled Downtime Page,  content : Appfog is one of the fast growing PaaS providers out there, however, some of the feature is not available yet, for example, a custom page to show during scheduled down time. This is one of the feature request, please vote it to make sure AppFog will implement this ASAP.In this post, I will describe how to make your own maintanance page, so let&amp;rsquo;s get started.AppFog Default Error PageAppFog display their default error page when your site is down during update, which is kind of not so userfriendly for your site visitor.Create a App to Display Scheduled Downtime PageTo display scheduled downtime page, you will need a simple app hosted at AppFog, most recommended way is to create a simple small Ruby Sinatra, NodeJS Express, or Python Flask app. I will not go through how to create those app in details, you can find a lot tutorials via Google Search.Before Update AppFogBefore update your main app, you need bind the scheduled downtime app to your main app&amp;rsquo;s domain. For example, is your main app domain is yourdomain.com, then you need bind scheculed downtime app into this domain before you update the main app.Screenshot:Update AppFog AppOnce your scheduled downtime page app is bind to same domain as your main app, you can start to update main app. During the main app&amp;rsquo;s downtime, all visitors will serve by your custom scheduled downtime page app without showing AppFog&amp;rsquo;s default error page thus increase your site engagement. You can futher develop the app to let user to enter email address to notify them after update is completed.},  {  id    : http://dreamand.me/web-development/how-to-load-adbrite-faster/,  title   : How To Load Adbrite Ads Faster/Asynchronously at Your Site,  content : adBrite is the largest independent ad exchange, reaching 300 million global unique visitors every month, including more than 150 million in the U.S. It is alternative to Google Adsense.In this post, I will describe how to make adBrite ads load faster at your site to increase your site engagement.Theory Behind Load Adbrite Ads FasterBefore implement the changes, let understand how to load Adbrite ads faster. Most modern browsers load iframe asynchronously without blocking other elements, thus the technique to load Adbrite ads faster/asynchronously is using html iframe.Create Iframe PageFirst for all, you need create a iframe page for your site to include the code provided by adBrite and name it as ads-banner.html. You can create few html for different types of ads.Example iframe code:&amp;lt;html&amp;gt;&amp;lt;body style=margin: 0; padding: 0;&amp;gt;&amp;lt;!-- Begin: adBrite, Generated: 2013-01-18 20:56:53  --&amp;gt;&amp;lt;!-- your adbrite code goes here --&amp;gt;&amp;lt;!-- End: adBrite --&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Include Iframe to show adBrite AdsTo include adBrite ads, you need add a iframe element to the placement where you want to show ads.&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;	&amp;lt;header&amp;gt;...&amp;lt;/header&amp;gt;	&amp;lt;section id=content&amp;gt;...&amp;lt;/section&amp;gt;	&amp;lt;section id=site-bar&amp;gt;...&amp;lt;/section&amp;gt;	&amp;lt;section id=banner&amp;gt;		&amp;lt;!-- add a iframe to link to your ads code --&amp;gt;		&amp;lt;iframe src=/ads-banner.html frameborder=0&amp;gt;&amp;lt;/iframe&amp;gt;	&amp;lt;/section&amp;gt;	&amp;lt;footer&amp;gt;...&amp;lt;/footer&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Test adBdite Ads Load TimeAfter you implement these changes, you will notice the page load time is significantly faster. Enjoy this enhancement and increase site engagement!},  {  id    : http://dreamand.me/cloud/how-to-backup-postgresql-to-localhost-at-appfog/,  title   : How to backup PostgreSQL to localhost at AppFog,  content : AppFog, Inc. is the leading platform-as-a-service provider of PHP, Ruby, Node.js, and Java solutions. Used by developers worldwide to deploy tens of thousands of applications, AppFog delivers a reliable, scalable and fast platform for deploying applications in the cloud. AppFog is a private company headquartered in Portland, Oregon.In this post, I will teach how to backup PostgreSQL database to local. So let&amp;rsquo;s get started!AppFog Command Line ToolFirst, make sure you have af gem installed.gem install afExport DatabaseTo backup, you need to export the database via af command## loginaf loginAttempting login to [https://api.appfog.com]Email: user@domain.comPassword: *********Successfully logged into [https://api.appfog.com]## export databaseaf export-service myservice		# myservice is the database you want to exportExporting data from 'myservice': OKhttp://dl.ap01.aws.af.cm/serialized/postgresql/&amp;lt;you database&amp;gt;/snapshots/1871?token=&amp;lt;random token&amp;gt;Note: user@domain.com is your AppFog username.Download exported Database BackupThen download the backup via the link shows at the console.Unzip the file, you will see two files in there:  manifest  content/1234.dumpImport to Local PostgreSQLThe *.dump file is just normal PostregSQL dump file, so you can import into any PostgreSQL as normal dump file. Since it is *.dump file, you will need to use pg_restore or PGAdmin 3 Client to restore.Restore Using pg_restore## create databse if you dont havepsql -U pgadmin -WPassword for user pgadmin: psql (9.1.7)Type help for help.pgadmin=# CREATE DATABASE development;CREATE DATABASEpgadmin=# \quit## restore into databasepg_restore -c -d development -U pgadmin -W 1234.dump Password: Verify Restorepsql -U pgadmin -d development -WPassword for user pgadmin: psql (9.1.7)Type help for help.development=# \d                  List of relations Schema |         Name          |   Type   |  Owner  --------+-----------------------+----------+--------- public | test                  | table    | pgadmin public | test_id_seq           | sequence | pgadmin(2 rows)Note: pgadmin is the database username, yours might not the same.Note: development is the database name, you can use your prefered name.Note: 1234.dump is the dump file name, your backup might not have same name.},  {  id    : http://dreamand.me/administration/install-postgresql-9-on-fedora-17/,  title   : How to Install Postgresql 9.1 on Fedora 17,  content : PostgreSQL is a powerful, open source object-relational database system. It is fully ACID compliant, has full support for foreign keys, joins, views, triggers, and stored procedures (in multiple languages). It includes most SQL:2008 data types, including INTEGER, NUMERIC, BOOLEAN, CHAR, VARCHAR, DATE, INTERVAL, and TIMESTAMP.In this post, I will describe how to install PostgreSQL 9.1 server on Fedora 17. So let&amp;rsquo;s get started.Install PostgreSQL 9.1 and Initialize Databasesudo yum install postgresql-serversudo postgresql-setup initdbEnable PostgreSQL Service and Start PostgreSQLIf you wish to start PostgreSQL as service, follow the step.sudo systemctl enable postgresql.servicesudo systemctl start postgresql.serviceCreate Database User and DatabaseTo create a pgadmin user and pgadmin database, follow the steps.su -			# change to rootsu postgres		# change to Postgres Usercreateuser --superuser -P pgadmincreatedb --encoding=utf-8 --owner=pgadmin pgadminChange Authentication MethodTo force the user authenticate using a password, we need change the config to use password authentication.sudo vi /var/lib/pgsql/data/pg_hba.confchange peer and ident to md5.# TYPE  DATABASE        USER            ADDRESS                 METHOD# local is for Unix domain socket connections onlylocal   all             all                                     peer# IPv4 local connections:host    all             all             127.0.0.1/32            ident# IPv6 local connections:host    all             all             ::1/128                 identto# TYPE  DATABASE        USER            ADDRESS                 METHOD# local is for Unix domain socket connections onlylocal   all             all                                     md5# IPv4 local connections:host    all             all             127.0.0.1/32            md5# IPv6 local connections:host    all             all             ::1/128                 md5Restart PostgreSQL to make new authetication method take effect.systemctl restart postgresql.serviceInstall PostgreSQL GUI ClientIf you want to manage PostgreSQL using a GUI client, you need to install pgadmin3.sudo yum install pgadmin3Then you can open  pgadmin gui.Test installationTo test the installation, try to login as pgadmin.psql -U pgadmin -WPassword for user pgadmin:psql (9.1.7)Type help for help.pgadmin=# },  {  id    : http://dreamand.me/cloud/paas-comparison-appfog-vs-heroku/,  title   : PaaS Comparison&amp;#58; AppFog vs Heroku,  content : Recently I have been playing PaaS for test thing out, and with recent General Available of AppFog, PaaS providers&amp;rsquo; competition become more interesting. In this post, I will compare AppFog with a mature PaaS provider, Heroku.So, there are many people think, what are their primary features that make you stick to particular PaaS provider? Lets do the comparison using case study.Memory ManagementDo you ever come across a senario where your app is consume 80MB most of the time, or well, 512MB is not enough for you when you deploy a huge Java Web Application (Yeah, Java)?With AppFog, this is not an issue for you, since they allow developer to configure how much memory they want to allocate to their app. Wow, awesome right? No more wasting your money to invest on ten dynos on heroku, where a lot of memory is not used.However, this can be a issue for you, if you choose to deploy your app to Heroku, you will need to buy a dyno with 512MB of RAM where either sometime is too larger, or too small. If your application consume 100MB RAM, and you deploy ten dynos, well, you wasted (512 - 100) * 10 = 4120MB of RAM!Pricing ModelI have a web application on production, suddenly my application is getting huge traffic after a tweet by a famous person. I want quickly scale my application to handle such traffic.According to AppFog pricing model, it is by subscription based model by select a plan. However, assume their able to upgrade plan within minutes, then it is fine (See Comment). But what if upgrade plan required more than 4 hours? Maybe your application will crash before upgrade to better plan. Futhermore, after 1 week your application traffic is back to normal, I believe you want to downgrade plan to save some money, which required you to submit a ticket to their support. However, AppFog offer free plan with 2GB of RAM, equivalent up to 4 dynos at heroku.Heroku is pay as you go, scale on demand PaaS, so this kind of senerio will not affect heroku users. Futhermore, you can scale to 10 dynos for an hours then scale back to 2 dynos. Cool.Data CentersI have a application, with the target users are from Asia. I want able to serves my content from data center that with low latency to Asia visitors.AppFog is the first PaaS provider provide cross regions deployment option to its customers. It allow me, a developer from Asia to deploy application that nearby here, such as Singapore. This enable my application serves visitors faster.Heroku does not support cross regions deployment option to its customers. I have a test application writed in Ruby On Rails, with a feature to upload a image to AWS S3 bucket at Singapore. But its not stable because there is 30 seconds timeout on heroku platform, which is reasonable constraint. But I just cant accept the application always failed to upload a image file. The workflow petty simple:Upload file to application at Heroku -&amp;gt; scale image into 3 deviations -&amp;gt; upload images to my AWS S3 bucket at Singaprore.Maybe I need redesign my application to use dyno worker, Resque, Redis to do such thing? Wow, I give up.Data StoreMost of the application required at least one datastore, let say I want a Relational Database for my application, I want able manual backup before deployment, daily automatic backup, and other features.AppFog just GA not long ago, currently they have free shared DB, such as mongoDB, MySQL, Postgres. However, they still no plan for serious production database option, but only through add-on such as ClearDB. But their roadmap included dedicated database, hopefully will be feature rich database plan and release soon!With heroku, it offer serious database production for RDBMS, Postgres. Futhermore, their offer also include other nice feature such as fork, follow, data clip and so on.DeploymentAssume I use scripting language such as Ruby for my application, I want able to deploy to production with simplest way, such as git push.Unforturenly AppFog does not have git integration into deployment, unless you need a custom application to deploy for you, such as node-pusher.Heroku&amp;rsquo;s deployment is tightly integrated with git, it is great and most of the people use git anyway.ConclusionThe table below show the sumarrized comparison.    	Features    Winner    My Choose        Memory Management    AppFog    AppFog!        Pricing Model    Heroku    AppFog free 2GB of RAM! Which is enough for me to handle small to medium spike traffic.        Data Centers    AppFog    AppFog for Asia!        Data Store    Heroku    Heroku Postgres is awesome!        Deployment    Heroku    For scripting language such as Ruby, Heroku! While Java, not much different for these two providers.  My choose of PaaS is AppFog, even the comparison shows Heroku is better. There are some roadblock in heroku cause me to choose AppFog such as memory managemet and Data Centers.},  {  id    : http://dreamand.me/cloud/paas-peformance-appfog-vs-cloudfoundry/,  title   : PaaS Performance&amp;#58; AppFog vs CloudFoundry,  content : Recently PaaS (Platform as a service) is new technologies that grow rapidly, to provide a platform let developers focus on creating awesome application/website instead of configuring/maintaining servers. In this fews weeks, I was playing around two PaaS, which are CloudFoundry and AppFog. These two PaaS provider is really awesome, and CloudFoundry is open source PaaS that available on github and AppFog is based on CloudFoundry.In this post, I will do a simple load test againts these two provider using Apache Benchmark, to see which one is performance better, and the result is surprising. The load test I doing is againt a simple Java web application available on at here. The main reason I use this simple application is because AppFog currently is having issue with Java application, thus I only can use the sample provided by them. I deployed same application to both of the provider. For AppFog, I deployed to AWS Virginia DC.CloudFoundry    	Cocurrent    200 Requests    600 Requests        20    118.76 Requests per second    113.17 Requests per second        40    211.93 Requests per second    226.95 Requests per second        60    317.88 Requests per second    338.05 Requests per second        80    426.50 Requests per second    408.15 Requests per second        100    482.07 Requests per second    440.98 Requests per second        120    461.10 Requests per second    471.54 Requests per second        140    443.34 Requests per second    483.24 Requests per second        160    411.08 Requests per second    502.00 Requests per second        180    410.2 Requests per second    498.79 Requests per second  AppFog    	Cocurrent    200 Requests    600 Requests        20    22.90 Requests per second    19.92 Requests per second        40    23.98 Requests per second    24.56 Requests per second        60    25.46 Requests per second    25.29 Requests per second        80    26.89 Requests per second    22.27 Requests per second        100    24.75 Requests per second    24.78 Requests per second        120    26.16 Requests per second    25.66 Requests per second        140    24.20 Requests per second    25.31 Requests per second        160    23.90 Requests per second    24.51 Requests per second        180    22.40 Requests per second    24.20 Requests per second  ConclusionFrom the two tables, we can notice that CloudFoundry can handle up to 500 requests per second while AppFog only 25 requests per second which is 20 times slower than CloudFoundry.},  {  id    : http://dreamand.me/github-page/github-page-custom-domain/,  title   : Custom domain for github pages,  content : Github.com provide free blog platform for geeks and hackers. One of the features include custom domain, by default the blog domain is USERNAME.github.com after you create a repository with USERNAME.github.com at your github account.To use custom domain, first you need to have a domain, either from godaddy.com or namecheap.com, in this post, I will use namecheap.com.First, create a file CNAME. Write the custom domain in the file, in my case is dreamand.me. Then commit and push to your repository.Then, login into your domain management page, add two A records to points to github pages&amp;rsquo; IP 204.232.175.78. First record is point from naked domain, in my case is dreamand.me, second record is point from www subdomain. After setup, wait few minutes to let the DNS take effect.You can have a look at my repository at here.},  {  id    : http://dreamand.me/app/aws-price-chart/,  title   : AWS Price Comparison Chart,  content : &amp;nbsp;Simple chart showing the comparison of the prices among different type of pricing for Small instance.},];// init lunrvar idx = lunr(function () {  this.field('title', 10);  this.field('content');})// add each document to be indexfor(var index in docs) {  idx.add(docs[index]);}Note: The file must begin with YAML front matter block so it will be processed by Jekyll as special files.Now your blog is index under idx object and you can search it. At the end of the documents, create a lunr with index fields title and content to be index.SearchNow is time to create search capibility using html, javascript. First, include search.js and lunr js in your site:&lt;script src=/js/lunr.min.js&gt;&lt;/script&gt;&lt;script src=/search.js&gt;&lt;/script&gt;Is time to create form element for user to search, I have created partial search.html for display search form:&lt;div class=minor well shadow&gt;  &lt;h3&gt;Search&lt;/h3&gt;  &lt;form&gt;    &lt;div class=input-append&gt;      &lt;input type=search name=q id=q placeholder=Enter keywords.../&gt;      &lt;button class=btn type=button&gt;GO!&lt;/button&gt;    &lt;/div&gt;  &lt;/form&gt;&lt;/div&gt;Finally, add jquery to handle search event, add into search.js or other javascript file:$(function() {  $(#search button).click(function() {    search();  });  $(#search input).keypress(function(e) {    if(e.which == 13) {      e.preventDefault();      search();    }  });})function search() {  var result = idx.search($(#search input).val());  if(result &amp;&amp; result.length &gt; 0) {    window.location.replace(result[0].ref);  } else {    alert(Found nothing);  }}ImprovementCurrently the search is not so user friendly where autocomplete is not available. When I am free I will improve it.SummaryUsing lunr, we able to bring the power of fulltext search to static generated blog, jekyll. Cool."
},

  {
  "id"    : "http://dreamand.me/web/internet-scammer/",
  "title"   : "How Internet Scammer Setup Scam",
  "content" : "I come across a site that displayed a intersting ads, earn money from home, so I clicked the ads. Then I landed a page. After have a look on the page, I immediately know it is a scam. In this post I will describe how they scam.The landing page is at here. WARNING: Do not submit your credit card infromation.Fake FamousOne way to trick victim is to make the offer is so famous that it appear on your country&rsquo;s news. On this landing page, I notice there is one &ldquo;AS SEEN ON&rdquo; section which display my country&rsquo;s newspaper publishers.After open the image in new tab, I notice the scammer use country specific &ldquo;AS SEEN ON&rdquo; images. So there are several fake famous images as following:SingaporeThailandIndonesiaFake Expire DateOne tactic I notice is the expired date of the offer, which is dynamically generate via JavaScript, thus the expired date is always next day. This make the victim fall in the trick to get the offer before expired.Fake CommentsFuther to trick victim, the scammer created few fake comments to indicate it is really work.Ask For PaymentAfter click some links, it finally come to a page mention for one-time payment. After click to get started, it link to a payment page ask for credit card details. Then victim will finally fall in to their scam.Ask for PaymentAsk for Credit Card InformationFinal step is to trick victim to fill in credit card information.ConclusionDon&rsquo;t ever submit your credit card to untrusted party."
},

  {
  "id"    : "http://dreamand.me/cloud/how-to-update-appfog-apps-without-downtime/",
  "title"   : "How To Update AppFog App With Scheduled Downtime Page",
  "content" : "Appfog is one of the fast growing PaaS providers out there, however, some of the feature is not available yet, for example, a custom page to show during scheduled down time. This is one of the feature request, please vote it to make sure AppFog will implement this ASAP.In this post, I will describe how to make your own maintanance page, so let&rsquo;s get started.AppFog Default Error PageAppFog display their default error page when your site is down during update, which is kind of not so userfriendly for your site visitor.Create a App to Display Scheduled Downtime PageTo display scheduled downtime page, you will need a simple app hosted at AppFog, most recommended way is to create a simple small Ruby Sinatra, NodeJS Express, or Python Flask app. I will not go through how to create those app in details, you can find a lot tutorials via Google Search.Before Update AppFogBefore update your main app, you need bind the scheduled downtime app to your main app&rsquo;s domain. For example, is your main app domain is yourdomain.com, then you need bind scheculed downtime app into this domain before you update the main app.Screenshot:Update AppFog AppOnce your scheduled downtime page app is bind to same domain as your main app, you can start to update main app. During the main app&rsquo;s downtime, all visitors will serve by your custom scheduled downtime page app without showing AppFog&rsquo;s default error page thus increase your site engagement. You can futher develop the app to let user to enter email address to notify them after update is completed."
},

  {
  "id"    : "http://dreamand.me/web-development/how-to-load-adbrite-faster/",
  "title"   : "How To Load Adbrite Ads Faster/Asynchronously at Your Site",
  "content" : "adBrite is the largest independent ad exchange, reaching 300 million global unique visitors every month, including more than 150 million in the U.S. It is alternative to Google Adsense.In this post, I will describe how to make adBrite ads load faster at your site to increase your site engagement.Theory Behind Load Adbrite Ads FasterBefore implement the changes, let understand how to load Adbrite ads faster. Most modern browsers load iframe asynchronously without blocking other elements, thus the technique to load Adbrite ads faster/asynchronously is using html iframe.Create Iframe PageFirst for all, you need create a iframe page for your site to include the code provided by adBrite and name it as ads-banner.html. You can create few html for different types of ads.Example iframe code:&lt;html&gt;&lt;body style=margin: 0; padding: 0;&gt;&lt;!-- Begin: adBrite, Generated: 2013-01-18 20:56:53  --&gt;&lt;!-- your adbrite code goes here --&gt;&lt;!-- End: adBrite --&gt;&lt;/body&gt;&lt;/html&gt;Include Iframe to show adBrite AdsTo include adBrite ads, you need add a iframe element to the placement where you want to show ads.&lt;html&gt;&lt;body&gt;	&lt;header&gt;...&lt;/header&gt;	&lt;section id=content&gt;...&lt;/section&gt;	&lt;section id=site-bar&gt;...&lt;/section&gt;	&lt;section id=banner&gt;		&lt;!-- add a iframe to link to your ads code --&gt;		&lt;iframe src=/ads-banner.html frameborder=0&gt;&lt;/iframe&gt;	&lt;/section&gt;	&lt;footer&gt;...&lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;Test adBdite Ads Load TimeAfter you implement these changes, you will notice the page load time is significantly faster. Enjoy this enhancement and increase site engagement!"
},

  {
  "id"    : "http://dreamand.me/cloud/how-to-backup-postgresql-to-localhost-at-appfog/",
  "title"   : "How to backup PostgreSQL to localhost at AppFog",
  "content" : "AppFog, Inc. is the leading platform-as-a-service provider of PHP, Ruby, Node.js, and Java solutions. Used by developers worldwide to deploy tens of thousands of applications, AppFog delivers a reliable, scalable and fast platform for deploying applications in the cloud. AppFog is a private company headquartered in Portland, Oregon.In this post, I will teach how to backup PostgreSQL database to local. So let&rsquo;s get started!AppFog Command Line ToolFirst, make sure you have af gem installed.gem install afExport DatabaseTo backup, you need to export the database via af command## loginaf loginAttempting login to [https://api.appfog.com]Email: user@domain.comPassword: *********Successfully logged into [https://api.appfog.com]## export databaseaf export-service myservice		# myservice is the database you want to exportExporting data from 'myservice': OKhttp://dl.ap01.aws.af.cm/serialized/postgresql/&lt;you database&gt;/snapshots/1871?token=&lt;random token&gt;Note: user@domain.com is your AppFog username.Download exported Database BackupThen download the backup via the link shows at the console.Unzip the file, you will see two files in there:  manifest  content/1234.dumpImport to Local PostgreSQLThe *.dump file is just normal PostregSQL dump file, so you can import into any PostgreSQL as normal dump file. Since it is *.dump file, you will need to use pg_restore or PGAdmin 3 Client to restore.Restore Using pg_restore## create databse if you dont havepsql -U pgadmin -WPassword for user pgadmin: psql (9.1.7)Type help for help.pgadmin=# CREATE DATABASE development;CREATE DATABASEpgadmin=# \quit## restore into databasepg_restore -c -d development -U pgadmin -W 1234.dump Password: Verify Restorepsql -U pgadmin -d development -WPassword for user pgadmin: psql (9.1.7)Type help for help.development=# \d                  List of relations Schema |         Name          |   Type   |  Owner  --------+-----------------------+----------+--------- public | test                  | table    | pgadmin public | test_id_seq           | sequence | pgadmin(2 rows)Note: pgadmin is the database username, yours might not the same.Note: development is the database name, you can use your prefered name.Note: 1234.dump is the dump file name, your backup might not have same name."
},

  {
  "id"    : "http://dreamand.me/administration/install-postgresql-9-on-fedora-17/",
  "title"   : "How to Install Postgresql 9.1 on Fedora 17",
  "content" : "PostgreSQL is a powerful, open source object-relational database system. It is fully ACID compliant, has full support for foreign keys, joins, views, triggers, and stored procedures (in multiple languages). It includes most SQL:2008 data types, including INTEGER, NUMERIC, BOOLEAN, CHAR, VARCHAR, DATE, INTERVAL, and TIMESTAMP.In this post, I will describe how to install PostgreSQL 9.1 server on Fedora 17. So let&rsquo;s get started.Install PostgreSQL 9.1 and Initialize Databasesudo yum install postgresql-serversudo postgresql-setup initdbEnable PostgreSQL Service and Start PostgreSQLIf you wish to start PostgreSQL as service, follow the step.sudo systemctl enable postgresql.servicesudo systemctl start postgresql.serviceCreate Database User and DatabaseTo create a pgadmin user and pgadmin database, follow the steps.su -			# change to rootsu postgres		# change to Postgres Usercreateuser --superuser -P pgadmincreatedb --encoding=utf-8 --owner=pgadmin pgadminChange Authentication MethodTo force the user authenticate using a password, we need change the config to use password authentication.sudo vi /var/lib/pgsql/data/pg_hba.confchange peer and ident to md5.# TYPE  DATABASE        USER            ADDRESS                 METHOD# local is for Unix domain socket connections onlylocal   all             all                                     peer# IPv4 local connections:host    all             all             127.0.0.1/32            ident# IPv6 local connections:host    all             all             ::1/128                 identto# TYPE  DATABASE        USER            ADDRESS                 METHOD# local is for Unix domain socket connections onlylocal   all             all                                     md5# IPv4 local connections:host    all             all             127.0.0.1/32            md5# IPv6 local connections:host    all             all             ::1/128                 md5Restart PostgreSQL to make new authetication method take effect.systemctl restart postgresql.serviceInstall PostgreSQL GUI ClientIf you want to manage PostgreSQL using a GUI client, you need to install pgadmin3.sudo yum install pgadmin3Then you can open  pgadmin gui.Test installationTo test the installation, try to login as pgadmin.psql -U pgadmin -WPassword for user pgadmin:psql (9.1.7)Type help for help.pgadmin=# "
},

  {
  "id"    : "http://dreamand.me/cloud/paas-comparison-appfog-vs-heroku/",
  "title"   : "PaaS Comparison&#58; AppFog vs Heroku",
  "content" : "Recently I have been playing PaaS for test thing out, and with recent General Available of AppFog, PaaS providers&rsquo; competition become more interesting. In this post, I will compare AppFog with a mature PaaS provider, Heroku.So, there are many people think, what are their primary features that make you stick to particular PaaS provider? Lets do the comparison using case study.Memory ManagementDo you ever come across a senario where your app is consume 80MB most of the time, or well, 512MB is not enough for you when you deploy a huge Java Web Application (Yeah, Java)?With AppFog, this is not an issue for you, since they allow developer to configure how much memory they want to allocate to their app. Wow, awesome right? No more wasting your money to invest on ten dynos on heroku, where a lot of memory is not used.However, this can be a issue for you, if you choose to deploy your app to Heroku, you will need to buy a dyno with 512MB of RAM where either sometime is too larger, or too small. If your application consume 100MB RAM, and you deploy ten dynos, well, you wasted (512 - 100) * 10 = 4120MB of RAM!Pricing ModelI have a web application on production, suddenly my application is getting huge traffic after a tweet by a famous person. I want quickly scale my application to handle such traffic.According to AppFog pricing model, it is by subscription based model by select a plan. However, assume their able to upgrade plan within minutes, then it is fine (See Comment). But what if upgrade plan required more than 4 hours? Maybe your application will crash before upgrade to better plan. Futhermore, after 1 week your application traffic is back to normal, I believe you want to downgrade plan to save some money, which required you to submit a ticket to their support. However, AppFog offer free plan with 2GB of RAM, equivalent up to 4 dynos at heroku.Heroku is pay as you go, scale on demand PaaS, so this kind of senerio will not affect heroku users. Futhermore, you can scale to 10 dynos for an hours then scale back to 2 dynos. Cool.Data CentersI have a application, with the target users are from Asia. I want able to serves my content from data center that with low latency to Asia visitors.AppFog is the first PaaS provider provide cross regions deployment option to its customers. It allow me, a developer from Asia to deploy application that nearby here, such as Singapore. This enable my application serves visitors faster.Heroku does not support cross regions deployment option to its customers. I have a test application writed in Ruby On Rails, with a feature to upload a image to AWS S3 bucket at Singapore. But its not stable because there is 30 seconds timeout on heroku platform, which is reasonable constraint. But I just cant accept the application always failed to upload a image file. The workflow petty simple:Upload file to application at Heroku -&gt; scale image into 3 deviations -&gt; upload images to my AWS S3 bucket at Singaprore.Maybe I need redesign my application to use dyno worker, Resque, Redis to do such thing? Wow, I give up.Data StoreMost of the application required at least one datastore, let say I want a Relational Database for my application, I want able manual backup before deployment, daily automatic backup, and other features.AppFog just GA not long ago, currently they have free shared DB, such as mongoDB, MySQL, Postgres. However, they still no plan for serious production database option, but only through add-on such as ClearDB. But their roadmap included dedicated database, hopefully will be feature rich database plan and release soon!With heroku, it offer serious database production for RDBMS, Postgres. Futhermore, their offer also include other nice feature such as fork, follow, data clip and so on.DeploymentAssume I use scripting language such as Ruby for my application, I want able to deploy to production with simplest way, such as git push.Unforturenly AppFog does not have git integration into deployment, unless you need a custom application to deploy for you, such as node-pusher.Heroku&rsquo;s deployment is tightly integrated with git, it is great and most of the people use git anyway.ConclusionThe table below show the sumarrized comparison.    	Features    Winner    My Choose        Memory Management    AppFog    AppFog!        Pricing Model    Heroku    AppFog free 2GB of RAM! Which is enough for me to handle small to medium spike traffic.        Data Centers    AppFog    AppFog for Asia!        Data Store    Heroku    Heroku Postgres is awesome!        Deployment    Heroku    For scripting language such as Ruby, Heroku! While Java, not much different for these two providers.  My choose of PaaS is AppFog, even the comparison shows Heroku is better. There are some roadblock in heroku cause me to choose AppFog such as memory managemet and Data Centers."
},

  {
  "id"    : "http://dreamand.me/cloud/paas-peformance-appfog-vs-cloudfoundry/",
  "title"   : "PaaS Performance&#58; AppFog vs CloudFoundry",
  "content" : "Recently PaaS (Platform as a service) is new technologies that grow rapidly, to provide a platform let developers focus on creating awesome application/website instead of configuring/maintaining servers. In this fews weeks, I was playing around two PaaS, which are CloudFoundry and AppFog. These two PaaS provider is really awesome, and CloudFoundry is open source PaaS that available on github and AppFog is based on CloudFoundry.In this post, I will do a simple load test againts these two provider using Apache Benchmark, to see which one is performance better, and the result is surprising. The load test I doing is againt a simple Java web application available on at here. The main reason I use this simple application is because AppFog currently is having issue with Java application, thus I only can use the sample provided by them. I deployed same application to both of the provider. For AppFog, I deployed to AWS Virginia DC.CloudFoundry    	Cocurrent    200 Requests    600 Requests        20    118.76 Requests per second    113.17 Requests per second        40    211.93 Requests per second    226.95 Requests per second        60    317.88 Requests per second    338.05 Requests per second        80    426.50 Requests per second    408.15 Requests per second        100    482.07 Requests per second    440.98 Requests per second        120    461.10 Requests per second    471.54 Requests per second        140    443.34 Requests per second    483.24 Requests per second        160    411.08 Requests per second    502.00 Requests per second        180    410.2 Requests per second    498.79 Requests per second  AppFog    	Cocurrent    200 Requests    600 Requests        20    22.90 Requests per second    19.92 Requests per second        40    23.98 Requests per second    24.56 Requests per second        60    25.46 Requests per second    25.29 Requests per second        80    26.89 Requests per second    22.27 Requests per second        100    24.75 Requests per second    24.78 Requests per second        120    26.16 Requests per second    25.66 Requests per second        140    24.20 Requests per second    25.31 Requests per second        160    23.90 Requests per second    24.51 Requests per second        180    22.40 Requests per second    24.20 Requests per second  ConclusionFrom the two tables, we can notice that CloudFoundry can handle up to 500 requests per second while AppFog only 25 requests per second which is 20 times slower than CloudFoundry."
},

  {
  "id"    : "http://dreamand.me/github-page/github-page-custom-domain/",
  "title"   : "Custom domain for github pages",
  "content" : "Github.com provide free blog platform for geeks and hackers. One of the features include custom domain, by default the blog domain is USERNAME.github.com after you create a repository with USERNAME.github.com at your github account.To use custom domain, first you need to have a domain, either from godaddy.com or namecheap.com, in this post, I will use namecheap.com.First, create a file CNAME. Write the custom domain in the file, in my case is dreamand.me. Then commit and push to your repository.Then, login into your domain management page, add two A records to points to github pages&rsquo; IP 204.232.175.78. First record is point from naked domain, in my case is dreamand.me, second record is point from www subdomain. After setup, wait few minutes to let the DNS take effect.You can have a look at my repository at here."
},

  {
  "id"    : "http://dreamand.me/app/aws-price-chart/",
  "title"   : "AWS Price Comparison Chart",
  "content" : "&nbsp;Simple chart showing the comparison of the prices among different type of pricing for Small instance."
},

];
// init lunr
var idx = lunr(function () {
  this.field('title', 10);
  this.field('content');
})
// add each document to be index
for(var index in docs) {
  idx.add(docs[index]);
}

$(function() {
  $("#search button").click(function() {
    search();
  });
  $("#search input").keypress(function(e) {
    if(e.which == 13) {
      e.preventDefault();
      search();
    }
  });
})

function search() {
  var result = idx.search($("#search input").val());
  if(result && result.length > 0) {
    window.location.replace(result[0].ref);
  } else {
    alert("Found nothing");
  }
}
